package main

import (
	"log"
	"net/http"
	"os"
	"strings"

	"github.com/line/line-bot-sdk-go/v7/linebot"
)

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Quick Reply ‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤)
func qrOptions(options []string) *linebot.QuickReplyItems {
	btns := make([]*linebot.QuickReplyButton, 0, len(options))
	for _, o := range options {
		btns = append(btns, linebot.NewQuickReplyButton("", linebot.NewMessageAction(o, o)))
	}
	return linebot.NewQuickReplyItems(btns...)
}

func main() {
	secret := os.Getenv("CHANNEL_SECRET")
	token := os.Getenv("CHANNEL_TOKEN")
	if secret == "" || token == "" {
		log.Fatal("set env CHANNEL_SECRET and CHANNEL_TOKEN first")
	}

	bot, err := linebot.New(secret, token)
	if err != nil {
		log.Fatal(err)
	}

	http.HandleFunc("/webhook", func(w http.ResponseWriter, r *http.Request) {
		events, err := bot.ParseRequest(r)
		if err != nil {
			if err == linebot.ErrInvalidSignature {
				http.Error(w, "bad signature", http.StatusBadRequest)
				return
			}
			log.Println("parse error:", err)
			w.WriteHeader(http.StatusOK)
			w.Write([]byte("OK"))
			return
		}

		for _, ev := range events {
			switch ev.Type {
			case linebot.EventTypeMessage:
				if m, ok := ev.Message.(*linebot.TextMessage); ok {
					text := strings.TrimSpace(m.Text)
					lower := strings.ToLower(text)

					// ‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÄ‡∏°‡∏ô‡∏π" ‡∏´‡∏£‡∏∑‡∏≠ "start" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
					if lower == "‡πÄ‡∏°‡∏ô‡∏π" || lower == "start" {
						msg := linebot.
							NewTextMessage("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢:")
						msgWithQuickReplies := msg.WithQuickReplies(qrOptions([]string{
							"‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á", "‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô", "‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°",
						}))
						if _, err := bot.ReplyMessage(ev.ReplyToken, msgWithQuickReplies).Do(); err != nil {
							log.Println("reply error:", err)
						}
						continue
					}

					// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏î ‡πÜ (‡∏à‡∏∞‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤)
					switch text {
					case "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á":
						bot.ReplyMessage(ev.ReplyToken, linebot.NewTextMessage("‡πÇ‡∏≠‡πÄ‡∏Ñ! ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ üòä\n(‡πÄ‡∏î‡πÇ‡∏°: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á)")).Do()
					case "‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô":
						bot.ReplyMessage(ev.ReplyToken, linebot.NewTextMessage("‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î\n(‡πÄ‡∏î‡πÇ‡∏°)")).Do()
					case "‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°":
						bot.ReplyMessage(ev.ReplyToken, linebot.NewTextMessage("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏á‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö üëá")).Do()
					default:
						// ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÄ‡∏°‡∏ô‡∏π" ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
						bot.ReplyMessage(ev.ReplyToken, linebot.NewTextMessage("‡∏û‡∏¥‡∏°‡∏û‡πå ‚Äú‡πÄ‡∏°‡∏ô‡∏π‚Äù ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")).Do()
					}
				}
			}
		}

		w.WriteHeader(http.StatusOK)
		w.Write([]byte("OK"))
	})

	port := os.Getenv("PORT")
	if port == "" {
		port = "3000"
	}
	log.Println("listening on :" + port)
	log.Fatal(http.ListenAndServe(":"+port, nil))
}
