package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings"
	"time"

	"github.com/joho/godotenv"
	"github.com/kelseyhightower/envconfig"
	"github.com/line/line-bot-sdk-go/v7/linebot"
	"github.com/skip2/go-qrcode"
)

/* ---------- ‡πÇ‡∏°‡πÄ‡∏î‡∏•/‡∏™‡πÇ‡∏ï‡∏£‡πå‡πÅ‡∏ö‡∏ö in-memory ---------- */

type Session struct {
	UserID        string
	CheckIn       string // "YYYY-MM-DD"
	CheckOut      string // "YYYY-MM-DD"
	Guests        int
	Rooms         int
	RoomType      string
	ReservationID string
	AmountTHB     int
	Status        string // pending | waiting_payment | paid | cancelled
}

var sessions = map[string]*Session{}
var reservations = map[string]*Session{}

var roomPrices = map[string]int{
	"Deluxe Sea View":     800,
	"Ocean Breeze Villa":  4500,
	"The Serenity Resort": 3200,
}

/* ---------- Utilities ---------- */

func mustFlex(jsonStr string) linebot.FlexContainer {
	var raw json.RawMessage = json.RawMessage(jsonStr)
	c, err := linebot.UnmarshalFlexMessageJSON(raw)
	if err != nil {
		log.Println("flex json error:", err)
		return nil
	}
	return c
}

func qrOptions(options []string) *linebot.QuickReplyItems {
	btns := make([]*linebot.QuickReplyButton, 0, len(options))
	for _, o := range options {
		btns = append(btns, linebot.NewQuickReplyButton("", linebot.NewMessageAction(o, o)))
	}
	return linebot.NewQuickReplyItems(btns...)
}

func reply(bot *linebot.Client, token string, msgs ...linebot.SendingMessage) {
	if token == "" {
		return
	}
	if _, err := bot.ReplyMessage(token, msgs...).Do(); err != nil {
		log.Println("reply error:", err)
	}
}

func push(bot *linebot.Client, to string, msgs ...linebot.SendingMessage) {
	if to == "" {
		return
	}
	if _, err := bot.PushMessage(to, msgs...).Do(); err != nil {
		log.Println("push error:", err)
	}
}

func nightsBetween(checkIn, checkOut string) int {
	ci, _ := time.Parse("2006-01-02", checkIn)
	co, _ := time.Parse("2006-01-02", checkOut)
	if co.After(ci) {
		return int(co.Sub(ci).Hours()/24 + 0.5)
	}
	return 0
}

func price(roomType string, nights, rooms int) int {
	base := roomPrices[roomType]
	return base * nights * rooms
}

func buttonsDatePicker(alt, title, data string) *linebot.TemplateMessage {
	tpl := &linebot.ButtonsTemplate{
		Text: title,
		Actions: []linebot.TemplateAction{
			// label, data, mode, initial, max, min
			linebot.NewDatetimePickerAction("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", data, "date", "", "", ""),
		},
	}
	return linebot.NewTemplateMessage(alt, tpl)
}

/* ---------- ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex ---------- */

func roomCarousel() linebot.SendingMessage {
	j := `{
	  "type": "carousel",
	  "contents": [
	    {
	      "type": "bubble",
	      "hero": { "type": "image", "url": "https://images.unsplash.com/photo-1501117716987-c8e97da8f6e7?q=80&w=1600&auto=format&fit=crop", "size":"full","aspectRatio":"20:13","aspectMode":"cover" },
	      "body": { "type":"box","layout":"vertical","spacing":"sm","contents":[
	        { "type":"text","text":"The Serenity Resort","weight":"bold","size":"xl","wrap":true },
	        { "type":"text","text":"‡πÄ‡∏£‡∏¥‡πà‡∏° ‡∏ø3,200 / ‡∏Ñ‡∏∑‡∏ô","size":"lg","weight":"bold","color":"#0E9F6E" },
	        { "type":"text","text":"‡∏£‡∏µ‡∏™‡∏≠‡∏£‡πå‡∏ó‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏á‡∏ö ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô","size":"sm","color":"#666666","wrap":true }
	      ]},
	      "footer": { "type":"box","layout":"vertical","spacing":"sm","contents":[
	        { "type":"button","style":"primary","color":"#111827","action":{"type":"postback","label":"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å","data":"flow=book&action=pick_room_type&room=The Serenity Resort","displayText":"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å The Serenity Resort"} }
	      ]}
	    },
	    {
	      "type": "bubble",
	      "hero": { "type": "image", "url": "https://images.unsplash.com/photo-1542314831-068cd1dbfeeb?q=80&w=1600&auto=format&fit=crop", "size":"full","aspectRatio":"20:13","aspectMode":"cover" },
	      "body": { "type":"box","layout":"vertical","spacing":"sm","contents":[
	        { "type":"text","text":"Ocean Breeze Villa","weight":"bold","size":"xl","wrap":true },
	        { "type":"text","text":"‡πÄ‡∏£‡∏¥‡πà‡∏° ‡∏ø4,500 / ‡∏Ñ‡∏∑‡∏ô","size":"lg","weight":"bold","color":"#0E9F6E" },
	        { "type":"text","text":"‡∏ß‡∏¥‡∏•‡∏•‡πà‡∏≤‡∏£‡∏¥‡∏°‡∏ó‡∏∞‡πÄ‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ß‡∏¥‡∏ß‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß","size":"sm","color":"#666666","wrap":true }
	      ]},
	      "footer": { "type":"box","layout":"vertical","spacing":"sm","contents":[
	        { "type":"button","style":"primary","color":"#111827","action":{"type":"postback","label":"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å","data":"flow=book&action=pick_room_type&room=Ocean Breeze Villa","displayText":"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Ocean Breeze Villa"} }
	      ]}
	    },
	    {
	      "type": "bubble",
	      "hero": { "type": "image", "url": "https://images.unsplash.com/photo-1496412705862-e0088f16f791?q=80&w=1600&auto=format&fit=crop", "size":"full","aspectRatio":"20:13","aspectMode":"cover" },
	      "body": { "type":"box","layout":"vertical","spacing":"sm","contents":[
	        { "type":"text","text":"Deluxe Sea View","weight":"bold","size":"xl","wrap":true },
	        { "type":"text","text":"‡πÄ‡∏£‡∏¥‡πà‡∏° ‡∏ø800 / ‡∏Ñ‡∏∑‡∏ô","size":"lg","weight":"bold","color":"#0E9F6E" },
	        { "type":"text","text":"‡∏´‡πâ‡∏≠‡∏á‡∏ß‡∏¥‡∏ß‡∏ó‡∏∞‡πÄ‡∏• ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤","size":"sm","color":"#666666","wrap":true }
	      ]},
	      "footer": { "type":"box","layout":"vertical","spacing":"sm","contents":[
	        { "type":"button","style":"primary","color":"#111827","action":{"type":"postback","label":"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å","data":"flow=book&action=pick_room_type&room=Deluxe Sea View","displayText":"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Deluxe Sea View"} }
	      ]}
	    }
	  ]
	}`
	if c := mustFlex(j); c != nil {
		return linebot.NewFlexMessage("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å", c)
	}
	return linebot.NewTextMessage("‡πÅ‡∏™‡∏î‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
}

func summaryCard(s *Session) linebot.SendingMessage {
	n := nightsBetween(s.CheckIn, s.CheckOut)
	j := fmt.Sprintf(`{
	  "type":"bubble",
	  "body":{"type":"box","layout":"vertical","spacing":"md","contents":[
	    {"type":"text","text":"üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á","size":"xl","weight":"bold","wrap":true},
	    {"type":"box","layout":"baseline","spacing":"sm","contents":[
	      {"type":"text","text":"‡∏´‡πâ‡∏≠‡∏á","size":"sm","color":"#555555"},
	      {"type":"text","text":%q,"size":"sm","weight":"bold","color":"#111827"}
	    ]},
	    {"type":"box","layout":"baseline","spacing":"sm","contents":[
	      {"type":"text","text":"‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô","size":"sm","color":"#555555"},
	      {"type":"text","text":%q,"size":"sm","weight":"bold","color":"#111827"}
	    ]},
	    {"type":"box","layout":"baseline","spacing":"sm","contents":[
	      {"type":"text","text":"‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå","size":"sm","color":"#555555"},
	      {"type":"text","text":%q,"size":"sm","weight":"bold","color":"#111827"}
	    ]},
	    {"type":"box","layout":"baseline","spacing":"sm","contents":[
	      {"type":"text","text":"‡∏Ñ‡∏∑‡∏ô","size":"sm","color":"#555555"},
	      {"type":"text","text":%q,"size":"sm","weight":"bold","color":"#111827"}
	    ]},
	    {"type":"box","layout":"baseline","spacing":"sm","contents":[
	      {"type":"text","text":"‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å","size":"sm","color":"#555555"},
	      {"type":"text","text":%q,"size":"sm","weight":"bold","color":"#111827"}
	    ]},
	    {"type":"box","layout":"baseline","spacing":"sm","contents":[
	      {"type":"text","text":"‡∏´‡πâ‡∏≠‡∏á","size":"sm","color":"#555555"},
	      {"type":"text","text":%q,"size":"sm","weight":"bold","color":"#111827"}
	    ]},
	    {"type":"box","layout":"baseline","spacing":"sm","contents":[
	      {"type":"text","text":"‡∏£‡∏ß‡∏°","size":"sm","color":"#555555"},
	      {"type":"text","text":%q,"size":"md","weight":"bold","color":"#0E9F6E"}
	    ]}
	  ]},
	  "footer":{"type":"box","layout":"vertical","spacing":"sm","contents":[
	    {"type":"button","style":"primary","color":"#111827",
	      "action":{"type":"postback","label":"‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô","data":"flow=pay&rid=%s","displayText":"‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô"} },
	    {"type":"button","action":{"type":"postback","label":"‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å","data":"flow=cancel&rid=%s","displayText":"‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"} }
	  ]}
	}`, s.RoomType, s.CheckIn, s.CheckOut, fmt.Sprintf("%d", n),
		fmt.Sprintf("%d ‡∏Ñ‡∏ô", s.Guests), fmt.Sprintf("%d ‡∏´‡πâ‡∏≠‡∏á", s.Rooms),
		fmt.Sprintf("‡∏ø%d", s.AmountTHB), s.ReservationID, s.ReservationID)

	if c := mustFlex(j); c != nil {
		return linebot.NewFlexMessage("‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á", c)
	}
	return linebot.NewTextMessage("‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á")
}

/* ---------- main ---------- */

type Config struct {
	Port          string `envconfig:"PORT"`
	ChannelSecret string `envconfig:"LINE_CHANNEL_SECRET"`
	ChannelToken  string `envconfig:"LINE_CHANNEL_TOKEN"`
}

var cfg Config

func init() {
	_ = godotenv.Load()
	if err := envconfig.Process("", &cfg); err != nil {
		log.Fatalf("read env error : %s", err.Error())
	}
}
func main() {
	secret := cfg.ChannelSecret
	token := cfg.ChannelToken
	if secret == "" || token == "" {
		log.Fatal("set CHANNEL_SECRET and CHANNEL_TOKEN")
	}
	bot, err := linebot.New(secret, token)
	if err != nil {
		log.Fatal(err)
	}

	// ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü QR (‡πÄ‡∏î‡πÇ‡∏°‡πà)
	http.HandleFunc("/qr/", func(w http.ResponseWriter, r *http.Request) {
		rid := strings.TrimPrefix(r.URL.Path, "/qr/")
		s := reservations[rid]
		if s == nil {
			http.NotFound(w, r)
			return
		}
		payload := fmt.Sprintf("PROMPTPAY-DEMO|RID=%s|AMOUNT=%d", rid, s.AmountTHB)
		png, _ := qrcode.Encode(payload, qrcode.Medium, 256)
		w.Header().Set("Content-Type", "image/png")
		w.Write(png)
	})

	http.HandleFunc("/webhook", func(w http.ResponseWriter, r *http.Request) {
		events, err := bot.ParseRequest(r)
		if err != nil {
			if err == linebot.ErrInvalidSignature {
				http.Error(w, "bad signature", http.StatusBadRequest)
				return
			}
			log.Println("parse:", err)
			w.WriteHeader(http.StatusOK)
			w.Write([]byte("OK"))
			return
		}

		for _, ev := range events {
			userID := ""
			if ev.Source != nil {
				userID = ev.Source.UserID
			}

			switch ev.Type {

			case linebot.EventTypeMessage:
				switch m := ev.Message.(type) {
				case *linebot.ImageMessage:
					// ‡∏£‡∏±‡∏ö‡∏™‡∏•‡∏¥‡∏õ ‚Üí ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô paid (‡πÄ‡∏î‡πÇ‡∏°‡πà)
					s := sessions[userID]
					if s != nil && s.Status == "waiting_payment" {
						s.Status = "paid"
						reply(bot, ev.ReplyToken, linebot.NewTextMessage("‚úÖ ‡∏£‡∏±‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ üéâ"))
					} else {
						reply(bot, ev.ReplyToken, linebot.NewTextMessage("‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö"))
					}

				case *linebot.TextMessage:
					text := strings.TrimSpace(m.Text)
					lower := strings.ToLower(text)

					if lower == "‡πÄ‡∏°‡∏ô‡∏π" || lower == "start" || strings.Contains(lower, "‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á") {
						msg := linebot.NewTextMessage("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô")
						msg = msg.WithQuickReplies(qrOptions([]string{"‡πÄ‡∏°‡∏ô‡∏π", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°"})).(*linebot.TextMessage)
						reply(bot, ev.ReplyToken, buttonsDatePicker("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô", "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡πÑ‡∏´‡∏ô?", "flow=book&action=checkin"))
						continue
					}

					// ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å (‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)
					if strings.HasSuffix(text, " ‡∏Ñ‡∏ô") {
						num := strings.TrimSuffix(text, " ‡∏Ñ‡∏ô")
						if n, err := strconv.Atoi(strings.TrimSpace(num)); err == nil {
							s := sessions[userID]
							if s != nil && s.CheckIn != "" && s.CheckOut != "" {
								s.Guests = n
								// ‡∏ñ‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á
								var opts []string
								for i := 1; i <= 3; i++ {
									opts = append(opts, fmt.Sprintf("%d ‡∏´‡πâ‡∏≠‡∏á", i))
								}
								reply(bot, ev.ReplyToken, linebot.NewTextMessage("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏á?").WithQuickReplies(qrOptions(opts)))
								continue
							}
						}
					}

					// ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á (‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)
					if strings.HasSuffix(text, " ‡∏´‡πâ‡∏≠‡∏á") {
						num := strings.TrimSuffix(text, " ‡∏´‡πâ‡∏≠‡∏á")
						if n, err := strconv.Atoi(strings.TrimSpace(num)); err == nil {
							s := sessions[userID]
							if s != nil && s.CheckIn != "" && s.CheckOut != "" && s.Guests > 0 {
								s.Rooms = n
								// ‡∏™‡πà‡∏á‡∏Ñ‡∏≤‡πÇ‡∏£‡πÄ‡∏ã‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡πâ‡∏≠‡∏á
								reply(bot, ev.ReplyToken, roomCarousel())
								continue
							}
						}
					}

					// ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‚Üí ‡∏ä‡∏µ‡πâ‡πÅ‡∏ô‡∏∞
					reply(bot, ev.ReplyToken, linebot.NewTextMessage("‡∏û‡∏¥‡∏°‡∏û‡πå ‚Äú‡πÄ‡∏°‡∏ô‡∏π‚Äù ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á üòÄ"))
				}

			case linebot.EventTypePostback:
				data := ev.Postback.Data
				date := ""
				if ev.Postback.Params != nil {
					date = ev.Postback.Params.Date
				}

				// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≠‡∏á: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô
				if strings.Contains(data, "flow=book&action=checkin") && date != "" {
					if sessions[userID] == nil {
						sessions[userID] = &Session{UserID: userID, Status: "pending"}
					}
					sessions[userID].CheckIn = date
					// ‡∏Ç‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå
					push(bot, userID, linebot.NewTextMessage("‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô: "+date+"\n‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå"))
					push(bot, userID, buttonsDatePicker("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå", "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå‡∏ß‡∏±‡∏ô‡πÑ‡∏´‡∏ô?", "flow=book&action=checkout"))
					continue
				}

				// ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå
				if strings.Contains(data, "flow=book&action=checkout") && date != "" {
					s := sessions[userID]
					if s == nil {
						continue
					}
					s.CheckOut = date
					push(bot, userID, linebot.NewTextMessage("‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå: "+date))

					// ‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å (Quick Reply)
					var opts []string
					for i := 1; i <= 4; i++ {
						opts = append(opts, fmt.Sprintf("%d ‡∏Ñ‡∏ô", i))
					}
					push(bot, userID, linebot.NewTextMessage("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å?").WithQuickReplies(qrOptions(opts)))
					continue
				}

				// ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡πâ‡∏≠‡∏á
				if strings.Contains(data, "flow=book&action=pick_room_type") {
					s := sessions[userID]
					if s == nil {
						continue
					}
					// ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å data
					if strings.Contains(data, "room=") {
						room := data[strings.Index(data, "room=")+5:]
						s.RoomType = room
						// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤ & ‡∏≠‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏à‡∏≠‡∏á
						n := nightsBetween(s.CheckIn, s.CheckOut)
						if n <= 0 {
							n = 1
						}
						s.AmountTHB = price(s.RoomType, n, s.Rooms)
						s.ReservationID = fmt.Sprintf("R-%d", time.Now().UnixNano())
						reservations[s.ReservationID] = s
						// ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ
						reply(bot, ev.ReplyToken, summaryCard(s))
					}
					continue
				}

				// ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô -> ‡∏™‡πà‡∏á QR + set waiting_payment
				if strings.Contains(data, "flow=pay&rid=") {
					rid := data[strings.Index(data, "rid=")+4:]
					s := reservations[rid]
					if s == nil {
						continue
					}
					s.Status = "waiting_payment"
					qrURL := fmt.Sprintf("https://%s/qr/%s", r.Host, rid)
					push(bot, userID, linebot.NewImageMessage(qrURL, qrURL))
					push(bot, userID, linebot.NewTextMessage("‡∏™‡πÅ‡∏Å‡∏ô QR ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÉ‡∏ô‡πÅ‡∏ä‡∏ï‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö"))
					continue
				}

				// ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
				if strings.Contains(data, "flow=cancel&rid=") {
					rid := data[strings.Index(data, "rid=")+4:]
					if s := reservations[rid]; s != nil {
						s.Status = "cancelled"
					}
					reply(bot, ev.ReplyToken, linebot.NewTextMessage("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö"))
					continue
				}
			}
		}

		w.WriteHeader(http.StatusOK)
		w.Write([]byte("OK"))
	})

	port := os.Getenv("PORT")
	if port == "" {
		port = "3000"
	}
	log.Println("listening on :" + port)
	log.Fatal(http.ListenAndServe(":"+port, nil))
}
